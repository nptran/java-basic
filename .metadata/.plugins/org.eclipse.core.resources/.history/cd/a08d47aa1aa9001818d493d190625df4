package baitapso1;

public class Function {
	
	public static int UCLN(int a, int b) {
		return (b == 0) ? a: UCLN(b, a % b);
	}
	
	public static int BCNN(int a, int b) {
		return (a*b)/(UCLN(a, b));
	}
	
	//to calculate the sum of digits of a number
	public static int sumOfDigits(int number, int sum) {
		return (number==0) ? sum+=(number%10) : sumOfDigits(number/10, sum+=(number%10));
	}
	
	//to check a number is prime or not
	public static boolean isPrime(int number) {
		if(number<2)
			return false;
		else 
			for (int i =2; i<=Math.sqrt(number); i++) {
				if(number%i==0)
					return false;
			}
		return true;
	}
	
	//split a number to multiple of prime numbers
	public static void toPrime(int number) {
		System.out.print(number + "=");
		int temp = number;
		while (temp!=1) {
			for(int i=2; i<number; i++) {
				if (Function.isPrime(i) && temp%i==0) {
					temp/=i;
					if(temp!=1) {
						System.out.print(i+"x");
					}
					else {
						System.out.println(i);
					}
				}
			}
		}
	}
	
	//to reverse a number
	public static int reverse(int number) {
		String s = String.valueOf(number);
		String rev = new StringBuffer(s).reverse().toString();
		number = Integer.parseInt(rev);
		return number;
	}
	
	//to check reversible number
	public static boolean reversible(int number) {
		
		int rev = reverse(number);
		
		if(number==rev) {
			return true;
		}
		else {
			return false;
		}
	}
	
	//to print n Fibonacci numbers
	public static int fibonacci(int n) {
		if (n==0)
			return 0;
		if (n==1)
			return 1;
		else
			return fibonacci(n-2)+fibonacci(n-1);
	}
	
	//to calculate the factorial
	public static int factorial (int number) {
		int factor = 1;
		for (int i =1; i<=number; i++) {
			factor*=i;
		}
		return factor;
	}

}
